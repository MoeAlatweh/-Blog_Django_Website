# this app will create it from scratch(will not clone anything ready from github)
# go to cmder and create folder called mysite or do it as normall by creating folder 

# need to create vertual enviroment:
# first tybe c:\Users\Alatweh\Anaconda3\Scripts\activate base... to activate your anaconda  
# then create the vertual enviroment by using: conda create --name mysite python=3.7  or  conda create --name Mywebsite python=3.7    (it is easier to name the vertual enviroment same as project or app name)
# activate your vertual envairoment by typing: conda activate mysite  or   conda activate Mywebsite
# initelize the reposetery to put in your github account by using: git init
# intall django frame work by typing: pip install django
# create django-project by starting create admin for your site by typing : django-admlsin startproject mysite . >>>>make sure to not forget put (.) in the end of this line>>>>>  django-admin startproject (name of app) .
# you will notice there is a files have been create it called>> manage.py and folder called mysite
# create app called blog inside your project by typing: python manage.py startapp blog
# you will notice there is a folder has been created called blog
# need to put it in our github account
# first type: git add .
# then commit that by typing: git commit -m "Initial commit. Setting up the project 
# then go to your github account and create new reposetery and name it: Blog_Django_Site  or  Blog_Django_Website
# then copy the link of reposetery you create
# then add your project to github by typing: git remote add origin https://github.com/MoeAlatweh/Blog_Django_Site.git   >>>if you want to remove remote url use git remote rm origin
# then push your app to github by using: git push origin master
# it will ask you fro username and password
# then to make sure everything is fine go and refresh your page and it should shows you project files
# then go and open it in Pycharm IDE to start coding
# open the project and set your Project Interpreter by go to setting and make it to be :
C:\Users\Alatweh\PycharmProjects\untitled\venv\Scripts\python.exe 
# go to activate your vertual envairoment 
# first type : c:\Users\Alatweh\Anaconda3\Scripts\activate base
# then type : conda activate mysite  or  conda activate Mywebsite
# need to create folder to put things you need to ignore and not tracking by git tool(because you just need to track files that releate in you project)
# create the folder by move cuersor to mysite in left hand>>rightclick>>new>>file>>name it (.gitignore)
# go inside .gitignore file and type .idea*
# type git status to check if you did it succisfuly and you should not see file idea
# create new branch by typing: git checkout -b step_1_meal_prep
# add it to github by typing : git add .
# commit it by typing : git commit -m "Ignore pycharm project settings."
# check how your up running by typing: python manage.py runserver
# it should show you django page and massege of install succsisfully
# need to remove another files to not track them
# go to .gitignore file and type: *.pyc
# push it to your github account by typing: git push origin step_1_meal_prep
# you will see it added to your github account
# add new commit by : 
# git add .
# git commit -m "Ignore PYC files"
# git push origin step_1_meal_prep
### end video #1


## biginning of video # 2
# create new branch by typing:  git checkout -b step_2_post_admin
# migrate your python file to create table for information we need from username and password...etc by:  python manage.py migrate
# create admin superusername by typing: python manage.py createsuperuser
# it will ask you for username type: leave it blank to have it same as computer user name (alatweh) if you want something else just type it   
# create email address:  moemenatweh@hotmail.com
# create password: admindjango
# it should get massage: Superuser created successfully.
# runserver and checkout your website
# go to chrome and type http://127.0.0.1:8000/admin to take you to admin sign page and login by information you have.
# now need to create post from admin page
# go to pycharm and inside blog folder open model.py to create model of post
# post model should have : author, post title, text contain post content, created date, and published date.
# after finish create post model go to setting and add our app
# open setting.py under mysite folder>>find INSTALLED_APPS and add 'blog'
# need to add post model things to database by typing: python manage.py makemigrations
# it should show you massage of : - Create model Post
# then to add the things to the database type:  python manage.py migrate
# it should show you message of: (Apply all migrations: admin, auth, blog, contenttypes, sessions
				  Running migrations:
  				  Applying blog.0001_initial... OK)
# and if you check this file(0001_initial...) you should see your post things (don't  change anything inside this file)
# create string represintaion in module file
# go to admin file and code for it 
# to adjust time zone...go to sitting file and find time zone and change it to (America/New_York)
# after you finish need to add it to github account, by 
# git add .
# git commit -m "Add ability to make posts from the administator interface."
# when you finish from this branch and you sure about every thing you merge it with master to be (up to date) by using:
# first you want to go to master by : git checkout master
# check the status by : git status
# to ignore some changes you don't to add type: git stash
# then mergr step 2 in master by using: git merge step_2_post_admin
# it should show you punsh of lines start by : Fast-forward
# need to push it to github by: git push origin master


## biginning of video # 3
# Start create html file to have post list.
# create folder(directery) inside blog folder and name it templates
# inside templates create folder name it blog
# inside blog create html file name it post_list
# after creating html file need to create view (go to view.py) to show this page on our website
# after creating view you need to create url
# if url.py si not exist create folder inside blog and name it urls
# after you finish from urls.py inside blog folder, go to urls.py inside mysite folder and do some adjusments
		# check this video at min 15:00 to get an idea about filters
# then go to view.py and add the way that shown list of the post
# after finish from view go to post_list.html and add dynamic code that show the posts these inside the database
# add all chenges to your github account
# create branch by using: git checkout -b step_3_create_post
# add and commit bu typing: git commit -m "Show all blog posts on the home page."
# then push to github account by using: git push origin step_3_create_post


## biginning of video # 4
# go to view.py and create function for post_detail
# create html file inside blog file with name post_detail.html
# go to blog\urls.py and add path for post_detail
# go to post_list and add link for post title
# add,commit and push to github


# biginning of video # 5
# go to post_list.html to add some style on it.
# need to add fonts from google to our app, make search on google font, choose which font you need , click on Select this style,click on icon that's indicate view your selected family, and under Embed copy the link and past it in your code
# for this app we will use: Inconsolata font, will copy the link and past it in head tag
# copy link from bootstrapcdn
# add classes to the code
# go to post_detail.html and do the same
# because the theme of our page will be the same for most pages(like page header, coler background...etc), we will create page that's have the main style thing and name it base.html(create html file inside template/blog folder)
# copy page_list.html file and past it in base.html and adjust it to have content block
# now you can delete everything in page post_list and post_detail with keep the special line we need 
 

# biginning of video # 6
# go to blog(above migrations and template folders),right cleck and create directory called static
# inside static folder we will create another directory called css
# inside css folder will create file and name it blog.css 
# to add codes for css file , we can start do that in chrom page of our app by inspect the page and start add lines then we can copy and past in our code
# make sure to link css file to base.html file
# go to css file and start code
# add, commit and push to github


# biginning of video # 7
# first need to creat new python file inside blog file and name it forms, to built form that's let us create new post
# inside templates/blog create html file and call it post_edit(the reason to name it like that, because no reason to create 2 html file one for create new post and one for edit post while both of them will have the same feilds and features, so we creat one html file for both features)
# go to vews.py and create new view called Post_new
# go to urls.py and map the new link that's appeare when we create new post
# go to forms.py and add codes to use django to create post
# go to view.py and define 'form' that use in post_edit.html, and add some codes
# go to post_edit file and add classes to make it better
# go to css file and create the 2 classes  that you add them in post_edit file 
# add, commit and push to github


# biginning of video # 8
# go to view.py and add function called post_edit
# go to urls file and create link 
# go to base.html and  add link for font awesome
# go to post_detail page and link for icon from font awesome



# biginning of video # 9
# go to base.html and add icon from font awesome to add new post
# go to css file  and create class for top-menu
# back to base.html and add class of top-menu,and add security line
# go to page_detail and add security line



# biginning of video # 10
# go to base.html and add icon for deaft posts from font awesome
# create html file inside blog/template/blog, and name it post_draft_list
# go to view.py and create function thst called post_draft_list
# go to urls file and create link
# go to post_draft_list and create the page
# go to view.py and function of post-publish
# go to urls file and create link
# go to page_detail and add pulish icon
# go to view.py, go to post_edit and post_new functions, and commit out lines of publish date to make sure is not published until we click the publish botton  



# biginning of video # 11
# create new branch by typing git checkout -b step_4_login
# go to url.py and import function that built in inside django.
# create link for login
# we don't need to create function in view.py because we use built in function inside django
# create folder called registration inside templates folder
# inside registration folder create html file and name it login
# go to login.html and add the code
# because we have issue after login by using built in function, we need to go to setting.py and add line to redirect us to post_list page.
# under ALLOWED_HOSTS = [] add this line LOGIN_REDIRECT_URL = 'post_list'
# need to add code that's let you create or edit new post if you are only login, otherwise take you to login page.
# to do that go to view.py and import function and add this line(@login_required) above functions of create new and edit post.
# go to base.html and add icon to login
# to make title in tab is dynamic and change depending on url..go to base.html and change title to <title>{% block title %}{% endblock %}</title> 
# go to each html file and code to make title dynamic
# add, commit and push to github



# biginning of video # 12
# need to move logoin and logout paths to the main url(mysite\urls.py) file because maybe you have different applications inside your website.
# go to mysite\urls.py and add path for login and logout
# because we have issue after logout by using built in function, we need to go to setting.py and add line to redirect us to post_list page.
# under ALLOWED_HOSTS = [] add this line LOGOUT_REDIRECT_URL = 'post_list'
# go to base.html and add name of user in top of page when he login, beside logout link.
# add, commit and push to github
# because step_3 and step_4 are ready we can push them to master by git checkout master
# then git merge step_4_login
# then git push origin master


# biginning of video # 13
# create new branch by type>> git checkout -b step_5_add_comments
# go to models.py and add comment model
# go to forms.py and create class CommentsForm
# go to view.py and create comments function
# go to post_details, to add code that shows comments.
# any time you create new module(or class) you need to add it to the database...
# first type: python manage.py migrate
# then: python manage.py makemigrations
# last: python manage.py migrate
# go to admin.py and rigister Comment module
# inside templates/blog, create file and name it..add_comment_to_post
# create page that shows the comment
# go to css file and add some styling for comment
# go to url.py and create path
# go to post_detail, and add button to create a comment
# add, commit and push to github	



# biginning of video # 14
# go to view.py and create function of comment_remove
# go to url.py and create path
# go to post detail and add button to delete comments 
# add, commit and push to github



# biginning of video # 15
# go to module.py and add some staff to Comment class
# any time you modify module(or class) you need to add it to the database...
# first type: python manage.py migrate
# then: python manage.py makemigrations
# last: python manage.py migrate
# go to view.py and add function comment_approve
# go to url.py and create path
# go to post_detail to add the logic of approve or remove comments and add button to approve the comments
# we need to add comments count under each post,in the same time we need just to show the approved comments if user is not the superuser to do that:
# go to models.py and add function of approved_comments
# go to post_list and add comment functionality 
# add, commit and push to github



